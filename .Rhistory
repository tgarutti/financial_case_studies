install.packages("zoo")
install.packages("xts")
clc
clear
install.packages("rugarch")
?rugarch
??rugarch
help(rugarch)
??rugarch
install.packages("xts")
install.packages("xts")
install.packages(xts)
install.packages("xts")
install.packages("xts")
??xts
install.packages("dplyr")
install.packages("xts")
13+25
t <-lapply(1:1000, function(t) (rt(1000,4)))
k <-seq(from=0.99,to=0.6,by= -0.001)
try <- lapply(k, FUN= function(k){
sapply(t,FUN=function(t) {
simu_fit<- fevd(t,type="GP",threshold= quantile(t,k))
coef <- simu_fit$results$par
xi <-coef[2]
beta <-coef[1]
zq_hat <- quantile(t,(k-0.001)) + (beta/xi)*  ( (0.01/(1-k))^(-xi) -1)
# zq_sample <-quantile(t,0.99)
zq <-qt(0.99,4)
out <-union(zq,zq_hat)
#mse <-mse(out[,1],mse[,2])
return(out)
} )
} )
library(Metrics)
mse <- sapply(try,FUN=function(try) {
try<-t(as.data.frame(try))
mse(try[,1],try[,2])
})
plot(mse)
library(Metrics)
mse <- sapply(try,FUN=function(try) {
try<-t(as.data.frame(try))
mse(try[,1],try[,2])
})
?plot.xy
install.packages("Metrics")
?plot.xy
library(Metrics)
?plot
matrix(rexp(200), 10)
matrix(rexp(24), 4)
abcd <- matrix(as.int(rexp(24)), 4)
abcd <- matrix(sample.int(100, 24), 4)
View(abcd)
abcd <- matrix(sample.int(10, 24), 4)
View(abcd)
abcd <- matrix(sample.int(10, 24, replace = TRUE), 4)
abcd <- matrix(sample.int(10, 24, replace = TRUE), 4)
counter <- as.matrix(1:4)
rows_mat <- apply(counter, 1, fun = function(i)
{
print(abcd[i,])
})
abcd <- matrix(sample.int(10, 24, replace = TRUE), 4)
counter <- as.matrix(1:4)
rows_mat <- apply(counter, 1, FUN  = function(i)
{
print(abcd[i,])
})
View(rows_mat)
View(abcd)
abcd <- matrix(sample.int(10, 24, replace = TRUE), 4)
counter <- as.matrix(1:4)
rows_mat <- apply(counter, 1, FUN  = function(i)
{
print(abcd[,i])
})
View(abcd)
abcd <- matrix(sample.int(10, 16, replace = TRUE), 4)
counter <- as.matrix(1:4)
rows_mat <- apply(counter, 1, FUN  = function(i)
{
print(abcd[,i])
})
abcd <- matrix(sample.int(10, 16, replace = TRUE), 4)
counter <- as.matrix(1:4)
rows_mat <- apply(counter, 1, FUN  = function(i)
{
print(abcd[i,])
})
View(abcd)
View(rows_mat)
abcd <- matrix(sample.int(10, 16, replace = TRUE), 4)
counter <- as.matrix(1:4)
rows_mat <- apply(counter, 1, FUN  = function(i)
{
return(abcd[i,])
})
View(abcd)
View(abcd)
View(rows_mat)
View(rows_mat)
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(xlsx)
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detach("package:rJava", unload=TRUE)
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detach("package:rJava", unload=TRUE)
library("rJava", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
source('~/.active-rstudio-document')
library(xlsx)
install.packages("xlsx")
library(xlsx)
require(xlsReadWrite)
install.packages("xlsxReadWrite")
##------------------------------------------------------------------##
## Main function.
##------------------------------------------------------------------##
source("source_file.R")
## PCA and analysis of factors
#Select data needed, either US or UK.
yieldCurve <- us_yield_ortec
countryData <- us_data
#Perform pca on the yield curve data.
pca <- prcomp(yieldCurve)
#Select the first principal component as the level factor.
Lt <- pca$x[,1]
normLt <- as.zoo((Lt - mean(Lt))/sqrt(var(Lt)))
index(normLt) <- index(yieldCurve)
#Select the second principal component as the slope factor.
St <- pca$x[,2]
normSt <- as.zoo(St - mean(St))/sqrt(var(St))
index(normSt) <- index(yieldCurve)
#Select PCE core inflation from the dataset. Demean the dataset, using a different mean every x years.
inflation <- countryData[,5]
# x <- 100
#
# for (i in 1:(floor(length(inflation)/(4*x))+1))
# {
#   s = ((i-1)*4*x+1)
#   e = i*4*x
#   if (e > length(inflation))
#   {
#     inflation[s:length(inflation)] = inflation[s:length(inflation)] - mean(inflation[s:length(inflation)])
#   }
#   else
#   {
#     inflation[s:e] = inflation[s:e] - mean(inflation[s:e])
#   }
# }
inflation <- inflation - mean(inflation)
#Plot the level factor against inflation.
plot(-normLt/100, ylim = c(-0.02,0.03), col = "green")
lines(inflation)
## Calculate and write descriptive statistics.
descriptives <- basic_descriptives(us_yield_ortec)
write_table(descriptives, "descriptivesYieldsOrtec.csv")
##------------------------------------------------------------------##
##------------------------------------------------------------------##
source("source_file.R")
source("source_file.R")
source("source_file.R")
setwd("~/Documents/Repositories/financial_case_studies")
source("source_file.R")
##------------------------------------------------------------------##
## Main function.
##------------------------------------------------------------------##
source("source_file.R")
## PCA and analysis of factors
#Select data needed, either US or UK.
yieldCurve <- us_yield_ortec
countryData <- us_data
#Perform pca on the yield curve data.
pca <- prcomp(yieldCurve)
#Select the first principal component as the level factor.
Lt <- pca$x[,1]
normLt <- as.zoo((Lt - mean(Lt))/sqrt(var(Lt)))
index(normLt) <- index(yieldCurve)
#Select the second principal component as the slope factor.
St <- pca$x[,2]
normSt <- as.zoo(St - mean(St))/sqrt(var(St))
index(normSt) <- index(yieldCurve)
#Select PCE core inflation from the dataset. Demean the dataset, using a different mean every x years.
inflation <- countryData[,5]
# x <- 100
#
# for (i in 1:(floor(length(inflation)/(4*x))+1))
# {
#   s = ((i-1)*4*x+1)
#   e = i*4*x
#   if (e > length(inflation))
#   {
#     inflation[s:length(inflation)] = inflation[s:length(inflation)] - mean(inflation[s:length(inflation)])
#   }
#   else
#   {
#     inflation[s:e] = inflation[s:e] - mean(inflation[s:e])
#   }
# }
inflation <- inflation - mean(inflation)
#Plot the level factor against inflation.
plot(-normLt/100, ylim = c(-0.02,0.03), col = "green")
lines(inflation)
## Calculate and write descriptive statistics.
descriptives <- basic_descriptives(us_yield_ortec)
write_table(descriptives, "descriptivesYieldsOrtec.csv")
##------------------------------------------------------------------##
##------------------------------------------------------------------##
?coredata
##------------------------------------------------------------------##
## Main function.
##------------------------------------------------------------------##
source("source_file.R")
## PCA and analysis of factors
#Select data needed, either US or UK.
yieldCurve <- us_yield_ortec
countryData <- us_data
#Perform pca on the yield curve data.
pca <- prcomp(yieldCurve)
#Select the first principal component as the level factor.
Lt <- pca$x[,1]
normLt <- as.zoo((Lt - mean(Lt))/sqrt(var(Lt)))
index(normLt) <- index(yieldCurve)
#Select the second principal component as the slope factor.
St <- pca$x[,2]
normSt <- as.zoo(St - mean(St))/sqrt(var(St))
index(normSt) <- index(yieldCurve)
#Select PCE core inflation from the dataset. Demean the dataset, using a different mean every x years.
inflation <- countryData[,5]
# x <- 100
#
# for (i in 1:(floor(length(inflation)/(4*x))+1))
# {
#   s = ((i-1)*4*x+1)
#   e = i*4*x
#   if (e > length(inflation))
#   {
#     inflation[s:length(inflation)] = inflation[s:length(inflation)] - mean(inflation[s:length(inflation)])
#   }
#   else
#   {
#     inflation[s:e] = inflation[s:e] - mean(inflation[s:e])
#   }
# }
inflation <- inflation - mean(inflation)
#Plot the level factor against inflation.
plot(-normLt/100, ylim = c(-0.02,0.03), col = "green")
lines(inflation)
## Calculate and write descriptive statistics.
descriptives <- basic_descriptives(us_yield_ortec)
write_table(descriptives, "descriptivesYieldsOrtec.csv")
##------------------------------------------------------------------##
##------------------------------------------------------------------##
plot(-normLt/100, ylim = c(-0.02,0.03), col = "green")
lines(inflation)
##------------------------------------------------------------------##
## Main function.
##------------------------------------------------------------------##
source("source_file.R")
## PCA and analysis of factors
#Select data needed, either US or UK.
yieldCurve <- us_yield_ortec
countryData <- us_data
#Perform pca on the yield curve data.
pca <- prcomp(yieldCurve)
#Select the first principal component as the level factor.
Lt <- pca$x[,1]
normLt <- as.zoo((Lt - mean(Lt))/sqrt(var(Lt)))
index(normLt) <- index(yieldCurve)
#Select the second principal component as the slope factor.
St <- pca$x[,2]
normSt <- as.zoo(St - mean(St))/sqrt(var(St))
index(normSt) <- index(yieldCurve)
#Select PCE core inflation from the dataset. Demean the dataset, using a different mean every x years.
inflation <- countryData[,5]
# x <- 100
#
# for (i in 1:(floor(length(inflation)/(4*x))+1))
# {
#   s = ((i-1)*4*x+1)
#   e = i*4*x
#   if (e > length(inflation))
#   {
#     inflation[s:length(inflation)] = inflation[s:length(inflation)] - mean(inflation[s:length(inflation)])
#   }
#   else
#   {
#     inflation[s:e] = inflation[s:e] - mean(inflation[s:e])
#   }
# }
inflation <- inflation - mean(inflation)
#Plot the level factor against inflation.
plot(-normLt/100, ylim = c(-0.02,0.03), col = "green")
lines(inflation)
## Calculate and write descriptive statistics.
descriptives <- basic_descriptives(us_yield_ortec)
write_table(descriptives, "descriptivesYieldsOrtec.csv")
##------------------------------------------------------------------##
##------------------------------------------------------------------##
##------------------------------------------------------------------##
## Main function.
##------------------------------------------------------------------##
source("source_file.R")
## PCA and analysis of factors
#Select data needed, either US or UK.
yieldCurve <- us_yield_ortec
countryData <- us_data
#Perform pca on the yield curve data.
pca <- prcomp(yieldCurve)
#Select the first principal component as the level factor.
Lt <- pca$x[,1]
normLt <- as.zoo((Lt - mean(Lt))/sqrt(var(Lt)))
index(normLt) <- index(yieldCurve)
#Select the second principal component as the slope factor.
St <- pca$x[,2]
normSt <- as.zoo(St - mean(St))/sqrt(var(St))
index(normSt) <- index(yieldCurve)
#Select PCE core inflation from the dataset. Demean the dataset, using a different mean every x years.
inflation <- countryData[,5]
# x <- 100
#
# for (i in 1:(floor(length(inflation)/(4*x))+1))
# {
#   s = ((i-1)*4*x+1)
#   e = i*4*x
#   if (e > length(inflation))
#   {
#     inflation[s:length(inflation)] = inflation[s:length(inflation)] - mean(inflation[s:length(inflation)])
#   }
#   else
#   {
#     inflation[s:e] = inflation[s:e] - mean(inflation[s:e])
#   }
# }
inflation <- inflation - mean(inflation)
## Calculate and write descriptive statistics.
descriptives <- basic_descriptives(us_yield_ortec)
write_table(descriptives, "descriptivesYieldsOrtec.csv")
#Plot the level factor against inflation.
plot(-normLt/100, ylim = c(-0.02,0.03), col = "green")
lines(inflation)
##------------------------------------------------------------------##
##------------------------------------------------------------------##
##------------------------------------------------------------------##
## Main function.
##------------------------------------------------------------------##
source("source_file.R")
## PCA and analysis of factors
#Select data needed, either US or UK.
yieldCurve <- us_yield_ortec
countryData <- us_data
#Perform pca on the yield curve data.
pca <- prcomp(yieldCurve)
#Select the first principal component as the level factor.
Lt <- pca$x[,1]
normLt <- as.zoo((Lt - mean(Lt))/sqrt(var(Lt)))
index(normLt) <- index(yieldCurve)
#Select the second principal component as the slope factor.
St <- pca$x[,2]
normSt <- as.zoo(St - mean(St))/sqrt(var(St))
index(normSt) <- index(yieldCurve)
#Select PCE core inflation from the dataset. Demean the dataset, using a different mean every x years.
inflation <- countryData[,5]
# x <- 100
#
# for (i in 1:(floor(length(inflation)/(4*x))+1))
# {
#   s = ((i-1)*4*x+1)
#   e = i*4*x
#   if (e > length(inflation))
#   {
#     inflation[s:length(inflation)] = inflation[s:length(inflation)] - mean(inflation[s:length(inflation)])
#   }
#   else
#   {
#     inflation[s:e] = inflation[s:e] - mean(inflation[s:e])
#   }
# }
inflation <- inflation - mean(inflation)
#Plot the level factor against inflation.
plot(-normLt/100, ylim = c(-0.02,0.03), col = "green")
lines(inflation)
## Calculate and write descriptive statistics.
descriptives <- basic_descriptives(us_yield_ortec)
write_table(descriptives, "descriptivesYieldsOrtec.csv")
##------------------------------------------------------------------##
##------------------------------------------------------------------##
##------------------------------------------------------------------##
## Main function.
##------------------------------------------------------------------##
source("source_file.R")
## PCA and analysis of factors
#Select data needed, either US or UK.
yieldCurve <- us_yield_ortec
countryData <- us_data
#Perform pca on the yield curve data.
pca <- prcomp(yieldCurve)
#Select the first principal component as the level factor.
Lt <- pca$x[,1]
normLt <- as.zoo((Lt - mean(Lt))/sqrt(var(Lt)))
index(normLt) <- index(yieldCurve)
#Select the second principal component as the slope factor.
St <- pca$x[,2]
normSt <- as.zoo(St - mean(St))/sqrt(var(St))
index(normSt) <- index(yieldCurve)
#Select PCE core inflation from the dataset. Demean the dataset, using a different mean every x years.
inflation <- countryData[,5]
# x <- 100
#
# for (i in 1:(floor(length(inflation)/(4*x))+1))
# {
#   s = ((i-1)*4*x+1)
#   e = i*4*x
#   if (e > length(inflation))
#   {
#     inflation[s:length(inflation)] = inflation[s:length(inflation)] - mean(inflation[s:length(inflation)])
#   }
#   else
#   {
#     inflation[s:e] = inflation[s:e] - mean(inflation[s:e])
#   }
# }
inflation <- inflation - mean(inflation)
#Plot the level factor against inflation.
plot(-normLt/100, ylim = c(-0.02,0.03), col = "green")
lines(inflation)
#OLS regression of slope factor on inflation and output gap
inf<- inflation  -Lt
output_gap<-countryData[,3]
data_St = data.frame(St, inf, output_gap)
model<- lm(St~inf+output_gap,data=data_St)
plot(fitted.values(model),ylim=c(-0.05,0.05), type="l", col="blue")
lines(St)
## Calculate and write descriptive statistics.
descriptives <- basic_descriptives(us_yield_ortec)
write_table(descriptives, "descriptivesYieldsOrtec.csv")
corr<- cor(pca$x, countryData)
##------------------------------------------------------------------##
##------------------------------------------------------------------##
